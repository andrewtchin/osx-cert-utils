#!/usr/bin/env python

"""
Find certificates in SystemRootCertificates keychain in OS X to remove.
"""

import argparse
import pprint
import subprocess

import cert_map
import osx_cert_utils


class CertFinder(object):
    def __init__(self):
        self.remove_certs = dict()
        self.whitelist = dict()

    def update_whitelist(self, cert_map):
        """Add certificates to the whitelist.
        Args:
            cert_map: dict of SHA-1 and name to add
        """
        self.whitelist.update(cert_map)

    def whitelist_netcraft(self):
        """Whitelist major certificates from Netcraft SSL survey."""
        self.update_whitelist(cert_map.NETCRAFT_SURVEY_CERTS)

    def whitelist_netsekure(self):
        """Whitelist major certificates from Netsekure survey."""
        self.update_whitelist(cert_map.NETSEKURE_MINIMAL_CERTS)

    def whitelist_qualys(self):
        """Whitelist major certificates from Qualys survey."""
        self.update_whitelist(cert_map.QUALYS_MINIMAL_CERTS)

    def whitelist_apple(self):
        """Whitelist Apple certificates."""
        self.update_whitelist(cert_map.APPLE_CERTS)

    def get_removal_list(self, outfile, ansible_vars):
        """Generate the removal file.
        Outputs dict or Ansible vars format.
        Args:
            outfile: path to write output file
            ansible_vars: boolean to output as Ansible vars format
        """
        all_certs = osx_cert_utils.get_all_certs()
        cert_map = osx_cert_utils.get_cert_name_map(all_certs)

        for cert in cert_map:
            if cert not in self.whitelist:
                self.remove_certs[cert] = cert_map[cert]

        if ansible_vars:
            with open(outfile, 'w') as fp:
                fp.write('certs:\n')
                for cert in self.remove_certs:
                    fp.write(''.join(['    - ', cert, '  # ', cert_map[cert], '\n']))
        else:
            with open(outfile, 'w') as fp:
                pprint.pprint(self.remove_certs, fp)

        print('Generated list of {} certs.'.format(len(self.remove_certs)))


def parse_args():
    parser = argparse.ArgumentParser(description='Generate a list of certificates hashes.')
    parser.add_argument('--whitelist-netcraft',
                        action='store_true',
                        help='whitelist major CAs identified by Netcraft SSL survey.')
    parser.add_argument('--whitelist-netsekure',
                        action='store_true',
                        help='whitelist major CAs identified by Netsekure.')
    parser.add_argument('--whitelist-qualys',
                        action='store_true',
                        help='whitelist major CAs identified by Qualys.')
    parser.add_argument('--whitelist-apple',
                        action='store_true',
                        help='whitelist Apple root CAs.')
    parser.add_argument('--ansible-vars',
                        action='store_true',
                        help='output hashes in format for Ansible vars file')
    parser.add_argument('--outfile',
                        required=True,
                        help='output filename')
    return parser.parse_args()


def main():
    """Generate a list of certificate hashes.
    Defaults to include all certificates.
    Use whitelist options to prevent removal of certain lists.
    Blacklist options will be override certificate list generated by whitelist options.
    """
    args = parse_args()

    cert_finder = CertFinder()

    if args.whitelist_netcraft:
        cert_finder.whitelist_netcraft()
    if args.whitelist_netsekure:
        cert_finder.whitelist_netsekure()
    if args.whitelist_qualys:
        cert_finder.whitelist_qualys()
    if args.whitelist_apple:
        cert_finder.whitelist_apple()

    cert_finder.get_removal_list(args.outfile, args.ansible_vars)


if __name__ == '__main__':
    main()
